---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Hero from '../components/Hero.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <canvas id="matrix"></canvas>
    <Header />
    <main>
      <Hero />
    </main>
    <Footer />
  </body>
</html>

<style>
/* Matrix Background */
#hero {
    position: relative;
    width: 100%;
    padding: 1em;
    height: 60vh;
    background: rgb(0, 19, 0); /* Dark green background */
}

/* The Matrix Canvas */
#matrix {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -5;
}

/* Hero Content */
.hero-content {
    text-align: center;
    color: var(--text-color); /* Neon green text */
    font-size: 2rem;
    font-weight: bold;
    z-index: -1;
}
</style>

<script is:inline>
const canvas = document.getElementById("matrix");
const ctx = canvas.getContext("2d");

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
const fontSize = 10;
const columns = Math.floor(canvas.width / fontSize);

// Initialize drops array with random values to give a staggered start
const drops = Array(columns).fill().map(() => Math.random() * canvas.height); // Randomize the start positions

// Function to get CSS variables
function getCssVar(variable) {
  return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
}

// Function to update Matrix theme colors
function updateMatrixColors() {
  ctx.fillStyle = getCssVar("--bg-color-muted") + "30"; // Background fade effect
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = getCssVar("--text-muted"); // Matrix text color
}

// Draw Matrix Effect
function drawMatrix() {
  updateMatrixColors();
  ctx.font = `${fontSize}px monospace`;

  for (let i = 0; i < drops.length; i++) {
    const text = letters[Math.floor(Math.random() * letters.length)];
    ctx.fillText(text, i * fontSize, drops[i] * fontSize);

    if (drops[i] * fontSize > canvas.height && Math.random() > 0.98) {
      drops[i] = 0;
    }
    drops[i]++;
  }
}

// Detect Theme Change & Apply New Colors
const observer = new MutationObserver(() => {
  updateMatrixColors();
});

observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });

setInterval(drawMatrix, 70);

window.addEventListener("resize", () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});
</script>
